using ITworks.Brom.Types;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace ITworks.Brom {
	/// <summary>
	/// Класс для формирования и выполнения запросов к базе данных 1С:Предприятие. 
	/// <list type="bullet">
	///		<listheader>Позволяет формировать и выполнять:</listheader>
	///		<item>простые запросы без параметров;</item>
	///		<item>параметризованные запросы;</item>
	///		<item>шаблонизированные запросы, содержащие разметку для построителя запросов;</item>
	///		<item>пакетные запросы;</item>
	///	</list>
	/// </summary>
	public class Запрос {
		internal Запрос(БромКлиент клиент) {
			this.bromClient = клиент;

			this.parameters = new Структура();
			this.filters = new List<УсловиеОтбора>();
			this.fields = new List<ПолеДанных>();
			this.sort = new List<Сортировка>();
		}
		internal Запрос(БромКлиент клиент, string текст):this(клиент) {
			this.text = текст;
		}

		private string text;
		private readonly БромКлиент bromClient;
		private readonly Структура parameters;
		private readonly List<УсловиеОтбора> filters;
		private readonly List<Сортировка> sort; 
		private readonly List<ПолеДанных> fields;

		#region Основные свойства
		/// <summary>
		/// Клиент Бром, через который выполняется запрос.
		/// </summary>
		public БромКлиент Клиент {
			get { return this.bromClient; }
		}

		/// <summary>
		/// Текст запроса на языке запросов 1С:Предприятие.
		/// </summary>
		public string Текст {
			get { return text; }
			set { this.text = value; }
		}

		/// <summary>
		/// Значения параметров, которые будут переданы в запрос.
		/// </summary>
		public Структура Параметры {
			get { return this.parameters; }
		}

		/// <summary>
		/// Дополнительные поля, которые будут добавлены в запрос построителем на стороне 1С.
		/// </summary>
		public IList<ПолеДанных> ВыбранныеПоля {
			get { return this.fields; }
		}

		/// <summary>
		/// Доплнительные правила упорядочения данных, которые будут добавлены построителем запроса на стороне 1С.
		/// </summary>
		public List<Сортировка> Порядок {
			get { return this.sort; }
		}

		/// <summary>
		/// Дополнительные условия отбора, которые будут добавлены построителем запроса на стороне 1С.
		/// </summary>
		public IList<УсловиеОтбора> Отбор {
			get { return this.filters; }
		}
		#endregion

		#region Методы построителя
		/// <summary>
		/// Устанавливает значение параметра, указанного в тексте запроса.
		/// </summary>
		/// <param name="имя">Имя параметра.</param>
		/// <param name="значение">Значение параметра произвольного сериализуемого типа.</param>
		public void УстановитьПараметр(string имя, object значение) {
			this.Параметры.Вставить(имя, значение);
		}

		/// <summary>
		/// Добавляет условие отбора, которое будет дописано в запрос построителем. Требует наличия разметки для построителя в тексте запроса.
		/// </summary>
		/// <param name="путьКДанным">Путь к данным поля.</param>
		/// <param name="значение">Значение сравнения произвольного сериализуемого типа. Должно совпадать соответствовать типу поля.</param>
		/// <param name="видСравнения">Вид сравнения значений.</param>
		/// <returns></returns>
		public УсловиеОтбора ДобавитьУсловиеОтбора(string путьКДанным, object значение, ВидСравнения видСравнения = ВидСравнения.Равно) {
			УсловиеОтбора условие = new УсловиеОтбора(путьКДанным, значение, видСравнения);
			this.filters.Add(условие);
			return условие;
		}

		/// <summary>
		/// Добавляет дополнительную сортировку результатов по указанному полю. Требует наличия разметки для построителя в тексте запроса.
		/// </summary>
		/// <param name="путьКДанным">Путь к данным поля, по которому требуется упорядочить результат.</param>
		/// <param name="направление">Направление сортировки.</param>
		public void ДобавитьУпорядочение(string путьКДанным, НаправлениеСортировки направление = НаправлениеСортировки.Возрастание) {
			this.ДобавитьУпорядочение(new Сортировка(путьКДанным, направление));
		}

		/// <summary>
		/// Добавляет дополнительную сортировку результатов по указанному полю. Требует наличия разметки для построителя в тексте запроса.
		/// </summary>
		/// <param name="элементСортировки">Элемент сортировки, описывающий правило сортировки результатов.</param>
		public void ДобавитьУпорядочение(Сортировка элементСортировки) {
			this.sort.Add(элементСортировки);
		}

		/// <summary>
		/// Добавляет дополнительное поле выборки. Требует наличия разметки для построителя в тексте запроса.
		/// </summary>
		/// <param name="путьКДанным">Путь к данным поля.</param>
		/// <param name="псевдоним">Псевдоним поля в результатах запроса.</param>
		public void ДобавитьПоле(string путьКДанным, string псевдоним) {
			this.ДобавитьПоле(new ПолеДанных(путьКДанным, псевдоним));
		}

		/// <summary>
		/// Добавляет дополнительное поле выборки. Требует наличия разметки для построителя в тексте запроса.
		/// </summary>
		/// <param name="поле">Дополниетльное поле, которое должно быть отображено в результатах запроса.</param>
		public void ДобавитьПоле(ПолеДанных поле) {
			this.fields.Add(поле);
		}
		#endregion

		#region Выполнение запроса
		/// <summary>
		/// Выполняет запрос и возвращает результат в виде объекта <see cref="ITworks.Brom.Types.ТаблицаЗначений">ТаблицаЗначений</see> или <see cref="ITworks.Brom.Types.ДеревоЗначений">ДеревоЗначений</see> в зависимости от типа обхода результатов.
		/// </summary>
		/// <param name="типОбхода">Алгоритм обхода результатов: прямой, по группировкам или по группировкам с иерархией.</param>
		/// <returns><see cref="ITworks.Brom.Types.ТаблицаЗначений">ТаблицаЗначений</see> или <see cref="ITworks.Brom.Types.ДеревоЗначений">ДеревоЗначений</see> в зависимости от типа обхода результатов.</returns>
		public object Выполнить(ОбходРезультатаЗапроса типОбхода) {
			return this.bromClient.ВыполнитьЗапрос(this.text, this.parameters, this.filters, this.fields, this.sort, типОбхода);
		}

		/// <summary>
		/// Выполняет запрос и возвращает результат в виде объекта <see cref="ITworks.Brom.Types.ТаблицаЗначений">ТаблицаЗначений</see>.
		/// </summary>
		/// <returns><see cref="ITworks.Brom.Types.ТаблицаЗначений">ТаблицаЗначений</see>, содержащая результаты запроса.</returns>
		public object Выполнить() {
			return this.Выполнить(ОбходРезультатаЗапроса.Прямой);
		}

		/// <summary>
		/// Выполняет запрос асинхронно и возвращает результат в виде объекта <see cref="ITworks.Brom.Types.ТаблицаЗначений">ТаблицаЗначений</see> или <see cref="ITworks.Brom.Types.ДеревоЗначений">ДеревоЗначений</see> в зависимости от типа обхода результатов.
		/// </summary>
		/// <param name="типОбхода">Алгоритм обхода результатов: прямой, по группировкам или по группировкам с иерархией.</param>
		/// <returns><see cref="ITworks.Brom.Types.ТаблицаЗначений">ТаблицаЗначений</see> или <see cref="ITworks.Brom.Types.ДеревоЗначений">ДеревоЗначений</see> в зависимости от типа обхода результатов.</returns>
		public Task<object> ВыполнитьАсинх(ОбходРезультатаЗапроса типОбхода) {
			return this.bromClient.ВыполнитьЗапросАсинх(this.text, this.parameters, this.filters, this.fields, this.sort, типОбхода);
		}

		/// <summary>
		/// Выполняет запрос асинхронно и возвращает результат в виде объекта <see cref="ITworks.Brom.Types.ТаблицаЗначений">ТаблицаЗначений</see>.
		/// </summary>
		/// <returns><see cref="ITworks.Brom.Types.ТаблицаЗначений">ТаблицаЗначений</see>, содержащая результаты запроса.</returns>
		public Task<object> ВыполнитьАсинх() {
			return this.ВыполнитьАсинх(ОбходРезультатаЗапроса.Прямой);
		}


		/// <summary>
		/// Выполняет пакетный запрос и возвращает результат в виде массива объектов <see cref="ITworks.Brom.Types.ТаблицаЗначений">ТаблицаЗначений</see> или <see cref="ITworks.Brom.Types.ДеревоЗначений">ДеревоЗначений</see> в зависимости от типа обхода результатов.
		/// </summary>
		/// <param name="типОбхода">Алгоритм обхода результатов: прямой, по группировкам или по группировкам с иерархией.</param>
		/// <param name="включатьВременныеДанные">Если true, то данные временных таблицы выводятся целиком, в противном случае выводится только количество строк.</param>
		/// <returns>Массив объектов <see cref="ITworks.Brom.Types.ТаблицаЗначений">ТаблицаЗначений</see> или <see cref="ITworks.Brom.Types.ДеревоЗначений">ДеревоЗначений</see> в зависимости от типа обхода результатов</returns>
		public object ВыполнитьПакет(ОбходРезультатаЗапроса типОбхода, bool включатьВременныеДанные) {
			return this.bromClient.ВыполнитьПакетныйЗапрос(this.text, this.parameters, this.filters, this.fields, this.sort, типОбхода, включатьВременныеДанные);
		}

		/// <summary>
		/// Выполняет пакетный запрос и возвращает результат в виде массива объектов <see cref="ITworks.Brom.Types.ТаблицаЗначений">ТаблицаЗначений</see>.
		/// </summary>
		/// <param name="включатьВременныеДанные">Если true, то данные временных таблицы выводятся целиком, в противном случае выводится только количество строк.</param>
		/// <returns>Массив объектов <see cref="ITworks.Brom.Types.ТаблицаЗначений">ТаблицаЗначений</see> или <see cref="ITworks.Brom.Types.ДеревоЗначений">ДеревоЗначений</see> в зависимости от типа обхода результатов</returns>
		public object ВыполнитьПакет(bool включатьВременныеДанные) {
			return this.ВыполнитьПакет(ОбходРезультатаЗапроса.Прямой, включатьВременныеДанные);
		}

		/// <summary>
		/// Выполняет пакетный запрос и возвращает результат в виде массива объектов <see cref="ITworks.Brom.Types.ТаблицаЗначений">ТаблицаЗначений</see> или <see cref="ITworks.Brom.Types.ДеревоЗначений">ДеревоЗначений</see> в зависимости от типа обхода результатов.
		/// </summary>
		/// <param name="типОбхода">Алгоритм обхода результатов: прямой, по группировкам или по группировкам с иерархией.</param>
		/// <returns>Массив объектов <see cref="ITworks.Brom.Types.ТаблицаЗначений">ТаблицаЗначений</see> или <see cref="ITworks.Brom.Types.ДеревоЗначений">ДеревоЗначений</see> в зависимости от типа обхода результатов</returns>
		public object ВыполнитьПакет(ОбходРезультатаЗапроса типОбхода) {
			return this.ВыполнитьПакет(типОбхода, false);
		}

		/// <summary>
		/// Выполняет пакетный запрос и возвращает результат в виде массива объектов <see cref="ITworks.Brom.Types.ТаблицаЗначений">ТаблицаЗначений</see>.
		/// </summary>
		/// <returns>Массив объектов <see cref="ITworks.Brom.Types.ТаблицаЗначений">ТаблицаЗначений</see> или <see cref="ITworks.Brom.Types.ДеревоЗначений">ДеревоЗначений</see> в зависимости от типа обхода результатов</returns>
		public object ВыполнитьПакет() {
			return this.ВыполнитьПакет(ОбходРезультатаЗапроса.Прямой, false);
		}


		/// <summary>
		/// Выполняет пакетный запрос асинхронно и возвращает результат в виде массива объектов <see cref="ITworks.Brom.Types.ТаблицаЗначений">ТаблицаЗначений</see> или <see cref="ITworks.Brom.Types.ДеревоЗначений">ДеревоЗначений</see> в зависимости от типа обхода результатов.
		/// </summary>
		/// <param name="типОбхода">Алгоритм обхода результатов: прямой, по группировкам или по группировкам с иерархией.</param>
		/// <param name="включатьВременныеДанные">Если true, то данные временных таблицы выводятся целиком, в противном случае выводится только количество строк.</param>
		/// <returns>Массив объектов <see cref="ITworks.Brom.Types.ТаблицаЗначений">ТаблицаЗначений</see> или <see cref="ITworks.Brom.Types.ДеревоЗначений">ДеревоЗначений</see> в зависимости от типа обхода результатов</returns>
		public Task<object> ВыполнитьПакетАсинх(ОбходРезультатаЗапроса типОбхода, bool включатьВременныеДанные = false) {
			return this.bromClient.ВыполнитьПакетныйЗапросАсинх(this.text, this.parameters, this.filters, this.fields, this.sort, типОбхода, включатьВременныеДанные);
		}

		/// <summary>
		/// Выполняет пакетный запрос асинхронно и возвращает результат в виде массива объектов <see cref="ITworks.Brom.Types.ТаблицаЗначений">ТаблицаЗначений</see>.
		/// </summary>
		/// <param name="включатьВременныеДанные">Если true, то данные временных таблицы выводятся целиком, в противном случае выводится только количество строк.</param>
		/// <returns>Массив объектов <see cref="ITworks.Brom.Types.ТаблицаЗначений">ТаблицаЗначений</see> или <see cref="ITworks.Brom.Types.ДеревоЗначений">ДеревоЗначений</see> в зависимости от типа обхода результатов</returns>
		public Task<object> ВыполнитьПакетАсинх(bool включатьВременныеДанные = false) {
			return this.ВыполнитьПакетАсинх(ОбходРезультатаЗапроса.Прямой, включатьВременныеДанные);
		}

		/// <summary>
		/// Выполняет пакетный запрос и возвращает результат в виде массива объектов <see cref="ITworks.Brom.Types.ТаблицаЗначений">ТаблицаЗначений</see> или <see cref="ITworks.Brom.Types.ДеревоЗначений">ДеревоЗначений</see> в зависимости от типа обхода результатов.
		/// </summary>
		/// <param name="типОбхода">Алгоритм обхода результатов: прямой, по группировкам или по группировкам с иерархией.</param>
		/// <returns>Массив объектов <see cref="ITworks.Brom.Types.ТаблицаЗначений">ТаблицаЗначений</see> или <see cref="ITworks.Brom.Types.ДеревоЗначений">ДеревоЗначений</see> в зависимости от типа обхода результатов</returns>
		public Task<object> ВыполнитьПакетАсинх(ОбходРезультатаЗапроса типОбхода) {
			return this.ВыполнитьПакетАсинх(типОбхода, false);
		}

		/// <summary>
		/// Выполняет пакетный запрос асинхронно и возвращает результат в виде массива объектов <see cref="ITworks.Brom.Types.ТаблицаЗначений">ТаблицаЗначений</see>.
		/// </summary>
		/// <returns>Массив объектов <see cref="ITworks.Brom.Types.ТаблицаЗначений">ТаблицаЗначений</see> или <see cref="ITworks.Brom.Types.ДеревоЗначений">ДеревоЗначений</see> в зависимости от типа обхода результатов</returns>
		public Task<object> ВыполнитьПакетАсинх() {
			return this.ВыполнитьПакетАсинх(ОбходРезультатаЗапроса.Прямой, false);
		}
		#endregion
	}
}
