using ITworks.Brom;
using ITworks.Brom.Types;
using Xunit;

namespace BromUnitTests {
	public class ВыполнениеЗапросовТест : БромКлиентТест {

        [Fact]
        public void ВыполнениеПростогоЗапроса() {
			Запрос запрос = this.БромКлиент.СоздатьЗапрос();

			запрос.Текст = @"
				ВЫБРАТЬ
				123.45 КАК Поле1,
				""привет"" КАК Поле2,
				ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский) КАК Поле3
			";

			object результат = запрос.Выполнить();
			dynamic данные = результат;

			Assert.IsType<ТаблицаЗначений>(результат);
			Assert.Single(данные);
			Assert.Equal((decimal)123.45, данные[0].Поле1);
			Assert.Equal("привет", данные[0].Поле2);
			Assert.Equal(this.Клиент.Перечисления.ПолФизическогоЛица.Женский, данные[0].Поле3);
		}

		[Fact]
		public void ВыполнениеЗапросаСКомпановкой() {
			Запрос запрос = this.БромКлиент.СоздатьЗапрос();

			запрос.Текст = @"
				ВЫБРАТЬ
					Номенклатура.Ссылка КАК Ссылка
				{ВЫБРАТЬ
					Ссылка.* КАК Объект}
				ИЗ
					Справочник.Номенклатура КАК Номенклатура
				ГДЕ
					Номенклатура.ЭтоГруппа = &ЭтоГруппа
				{ГДЕ
					Номенклатура.Ссылка.* КАК Объект}
				{УПОРЯДОЧИТЬ ПО
					Ссылка.* КАК Объект}
			";

			запрос.УстановитьПараметр("ЭтоГруппа", false);
			запрос.ДобавитьПоле("Объект.Код", "Код");
			запрос.ДобавитьПоле("Объект.Наименование", "Наименование");
			запрос.ДобавитьПоле("Объект.Артикул", "Артикул");
			запрос.ДобавитьУсловиеОтбора("Объект.Родитель.Наименование", "Полуфабрикаты");
			запрос.ДобавитьУпорядочение("Объект.Наименование", НаправлениеСортировки.Убывание);

			object результат = запрос.Выполнить();
			dynamic данные = результат;

			Assert.IsType<ТаблицаЗначений>(результат);
			Assert.Equal(2, данные.Количество());
			Assert.Equal(4, данные.Колонки.Количество());
			Assert.Equal("Каркас двери парника GH-1", данные[0].Наименование);
			Assert.Equal("00-00000271", данные[1].Код);
			Assert.Equal("", данные[0].Артикул);
		}
	}
}
