using ITworks.Brom;
using ITworks.Brom.Types;
using Xunit;

namespace BromUnitTests {
	public class СелекторТест : БромКлиентТест {

        [Fact]
        public void ВыполнениеСелектораПеречисления()
        {
			object селекторОбект = this.Клиент.Перечисления.ВидыОперацийЭД.СоздатьСелектор();
			Assert.IsType<Селектор>(селекторОбект);

			Селектор селектор = (Селектор)селекторОбект;

			Ссылка[] результат = селектор.Выполнить().ВыгрузитьРезультат();
			Assert.Equal(4, результат.Length);

			Assert.Equal(this.Клиент.Перечисления.ВидыОперацийЭД.Комиссия, результат[3]); // ПеречислениеСсылка.ВидыОперацийЭД.Комиссия
		}

		[Fact]
		public void ВыполнениеСелектора() {
			Селектор селектор = this.БромКлиент.СоздатьСелектор();

			Ссылка[] результат = селектор.
			Выбрать("Код, Наименование, Артикул").
			Из("Справочник.Номенклатура").
			Где("Родитель.Наименование", "Телевизоры").
			Упорядочить("Артикул", НаправлениеСортировки.Убывание).
			Выполнить().ВыгрузитьРезультат();

			Assert.Equal(3, результат.Length);
			Assert.IsType<СправочникСсылка>(результат[0]);
			Assert.Equal("Рубин - 340", ((dynamic)результат[0]).Наименование);
			Assert.Equal("Т-123456", ((dynamic)результат[2]).Артикул);

			селектор.Сбросить();

			результат = селектор.
			Выбрать("Код, Наименование, Артикул").
			Первые(1).
			Из("Справочник.Номенклатура").
			Где("Родитель.Наименование", "Телевизоры").
			Упорядочить("Артикул", НаправлениеСортировки.Возрастание).
			Выполнить().ВыгрузитьРезультат();

			Assert.Single(результат);
			Assert.IsType<СправочникСсылка>(результат[0]);
			Assert.Equal("Т-123456", ((dynamic)результат[0]).Артикул);
		}
	}
}
